<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学写操作系统 之 引导程序</title>
    <url>/2022/01/%E5%AD%A6%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E4%B9%8B-%E5%BC%95%E5%AF%BC%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>参考书：《一个64位操作系统的设计与实现》 田宇 著</p>
<p>环境：CentOS7 + Bochs-2.6.8</p>
<h3 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h3><p>开机按钮按下，BIOS自检设备。自检结束，根据启动项的设置去检查磁盘。为了入门简单，这里的磁盘指的是相对简单但是已经被淘汰的软盘。BIOS检测软盘的第0磁头第0磁道第1扇区是否以0x55和0xaa这两个字节作为结尾（为什么是这两个，我不太清楚，也没有找到太权威的答案）。如果是，那么 BIOS就认为这个扇区是一个引导扇区，进而把这个扇区的内容复制到物理内存地址0x7c00处，随后处理器跳转至0x7c00地址处执行一条条的指令，我们放在软盘第0磁头第0磁道第1扇区的Boot引导程序就被执行了。我们知道，一个扇区512B容量比较小，所以Boot引导程序只能作为“一级助推器”，将功能更加强大的引导加载程序Loader装载到内存中。所以这篇引导程序有两个，一个是Boot，一个是Loader。</p>
<h4 id="一些参考："><a href="#一些参考：" class="headerlink" title="一些参考："></a>一些参考：</h4><p><a href="https://blog.csdn.net/smallmuou/article/details/6796867">软盘结构及软盘数据的读取-CSDN</a></p>
<p><a href="https://www.bilibili.com/video/BV1464y1T7Qv/">移动软盘驱动器拆解-B站</a></p>
<span id="more"></span>

<h3 id="Boot引导程序"><a href="#Boot引导程序" class="headerlink" title="Boot引导程序"></a>Boot引导程序</h3><p>源代码可以在<a href="https://m.ituring.com.cn/book/2450">这里</a>下载</p>
<blockquote>
<p>然后渲染博客时markdown汇编代码段语法高亮好像没办法渲染出来。</p>
</blockquote>
<h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;篇幅有限，删去了源文件中的版权声明。版权归原作者，仅供学习交流使用</span><br><span class="line"></span><br><span class="line">	org	0x7c00</span><br><span class="line">    ;告诉编译器程序的起始地址，影响绝对地址的寻址指令</span><br><span class="line"></span><br><span class="line">BaseOfStack	equ	0x7c00</span><br><span class="line">;equ 伪指令，等价语句，将标识符BaseOfStack等价为数值0x7c00</span><br><span class="line"></span><br><span class="line">Label_Start:</span><br><span class="line">;开始时的下面几行：</span><br><span class="line">;设置ds, es, ss, sp寄存器的内容。(代码段 数据段 扩展段 栈段 栈指针)寄存器（前4个存基地址的）</span><br><span class="line">	mov	ax,	cs	</span><br><span class="line">	mov	ds,	ax</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	ss,	ax</span><br><span class="line">	mov	sp,	BaseOfStack</span><br><span class="line"></span><br><span class="line">;=======	clear screen</span><br><span class="line">;通过调用INT 10h中断实现清屏功能</span><br><span class="line">;先设置必要的寄存器参数然后调用BIOS中断服务程序</span><br><span class="line"></span><br><span class="line">	mov	ax,	0600h ;AH=06h: 按指定范围滚动窗口；AL=00h: 滚动的列数，为0则清屏</span><br><span class="line">	mov	bx,	0700h ;清屏时，BX, CX, DX寄存器将不起作用</span><br><span class="line">	mov	cx,	0</span><br><span class="line">	mov	dx,	0184fh</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	set focus</span><br><span class="line"></span><br><span class="line">	mov	ax,	0200h ;AH=02h: 设定光标位置</span><br><span class="line">	mov	bx,	0000h ;BH=00h: 页码</span><br><span class="line">	mov	dx,	0000h ;DH:DL=00h:00h: 0列0行</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	display on screen : Start Booting......</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h ;AH=13h: 显示一行字符串 AL=01h: 字符串属性由BL提供，显示后光标移到字符串尾端</span><br><span class="line">	mov	bx,	000fh ;0页 白色字体高亮度背景黑字体不闪烁</span><br><span class="line">	mov	dx,	0000h ;游标坐标0行0列</span><br><span class="line">	mov	cx,	10	  ;字符串长度10</span><br><span class="line">	push	ax	  ;两个段寄存器之间不能直接传送</span><br><span class="line">	mov	ax,	ds		</span><br><span class="line">	mov	es,	ax		;设置es为数据段基地址</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	StartBootMessage 	;设置bp为消息在数据段的偏移地址</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	reset floppy</span><br><span class="line">;重置软驱：将磁盘驱动器磁头移动至默认位置，在这里没啥实际作用</span><br><span class="line"></span><br><span class="line">	xor	ah,	ah ;AH=00h</span><br><span class="line">	xor	dl,	dl ;DL=00h :第一个软盘驱动器</span><br><span class="line">	int	13h</span><br><span class="line"></span><br><span class="line">	jmp	$	;死循环，$在NASM编译器中表示当前行被编译后的地址</span><br><span class="line"></span><br><span class="line">StartBootMessage:	db	&quot;Start Boot&quot;</span><br><span class="line"></span><br><span class="line">;=======	fill zero until whole sector</span><br><span class="line"></span><br><span class="line">	times	510 - ($ - $$)	db	0 ;在后面添满0，$$表示当前Section的地址（目前只有一个Section）。</span><br><span class="line">	dw	0xaa55					  ;最后用0x55 和 0xaa结尾，写成0xaa55是因为dw是小端序</span><br></pre></td></tr></table></figure>

<p>我们看到版本1非常简单，仅仅是加载程序输出一句话而已。下面看版本2，将Loader加载到内存。</p>
<p>去软盘里找Loader程序，如果Loader程序在固定扇区，虽然一时好找，但是后面使用软盘（内核）也必须使用固定扇区，这会对开发和维护造成极大不便（每次更新程序，写入软盘都要重新计算其实扇区和占用扇区数，如果要使用其他文件资源就更加不方便了），所以我们选择将Loader程序加载到文件系统中。这里为了方便入门，选择了淘汰的FAT12软盘型文件系统，后面我们再了解FAT32文件系统。</p>
<p>FAT12文件系统将软盘分为4部分：引导扇区、FAT表、根目录区、数据区。详情在书中P40开始，感兴趣也可自行查阅资料。</p>
<h4 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;篇幅有限，删去了源文件中的版权声明。版权归原作者，仅供学习交流使用</span><br><span class="line"></span><br><span class="line">	org	0x7c00	</span><br><span class="line"></span><br><span class="line">BaseOfStack	equ	0x7c00</span><br><span class="line"></span><br><span class="line">;下面两个是准备将Loader放在缓冲区的位置。</span><br><span class="line">BaseOfLoader	equ	0x1000	;基地址</span><br><span class="line">OffsetOfLoader	equ	0x00	;偏移量  实模式地址变换公式: Addr = Base &lt;&lt; 4 + Offset</span><br><span class="line"></span><br><span class="line">RootDirSectors	equ	14		;根目录占用的扇区数，根据FAT12信息算出来的</span><br><span class="line">SectorNumOfRootDirStart	equ	19	;根目录起始扇区号，算出来的</span><br><span class="line"></span><br><span class="line">SectorNumOfFAT1Start	equ	1	;FAT1表的起始扇区号，0是保留扇区（引导扇区）</span><br><span class="line">SectorBalance	equ	17			;19-2（这里每簇Cluster一个扇区Sector）</span><br><span class="line"></span><br><span class="line">	;下面的部分对应引导扇区的代码前面的部分，是一些FAT12文件系统的信息。共62B</span><br><span class="line">	jmp	short Label_Start</span><br><span class="line">	nop</span><br><span class="line">	BS_OEMName	db	&#x27;MINEboot&#x27;</span><br><span class="line">	BPB_BytesPerSec	dw	512</span><br><span class="line">	BPB_SecPerClus	db	1</span><br><span class="line">	BPB_RsvdSecCnt	dw	1</span><br><span class="line">	BPB_NumFATs	db	2</span><br><span class="line">	BPB_RootEntCnt	dw	224</span><br><span class="line">	BPB_TotSec16	dw	2880</span><br><span class="line">	BPB_Media	db	0xf0</span><br><span class="line">	BPB_FATSz16	dw	9</span><br><span class="line">	BPB_SecPerTrk	dw	18</span><br><span class="line">	BPB_NumHeads	dw	2</span><br><span class="line">	BPB_HiddSec	dd	0</span><br><span class="line">	BPB_TotSec32	dd	0</span><br><span class="line">	BS_DrvNum	db	0</span><br><span class="line">	BS_Reserved1	db	0</span><br><span class="line">	BS_BootSig	db	0x29</span><br><span class="line">	BS_VolID	dd	0</span><br><span class="line">	BS_VolLab	db	&#x27;boot loader&#x27;</span><br><span class="line">	BS_FileSysType	db	&#x27;FAT12   &#x27;</span><br><span class="line"></span><br><span class="line">Label_Start:</span><br><span class="line">;这个标签下的代码和版本1相同</span><br><span class="line">	mov	ax,	cs</span><br><span class="line">	mov	ds,	ax</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	ss,	ax</span><br><span class="line">	mov	sp,	BaseOfStack</span><br><span class="line"></span><br><span class="line">;=======	clear screen</span><br><span class="line"></span><br><span class="line">	mov	ax,	0600h</span><br><span class="line">	mov	bx,	0700h</span><br><span class="line">	mov	cx,	0</span><br><span class="line">	mov	dx,	0184fh</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	set focus</span><br><span class="line"></span><br><span class="line">	mov	ax,	0200h</span><br><span class="line">	mov	bx,	0000h</span><br><span class="line">	mov	dx,	0000h</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	display on screen : Start Booting......</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000fh</span><br><span class="line">	mov	dx,	0000h</span><br><span class="line">	mov	cx,	10</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	StartBootMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	reset floppy</span><br><span class="line"></span><br><span class="line">	xor	ah,	ah</span><br><span class="line">	xor	dl,	dl</span><br><span class="line">	int	13h</span><br><span class="line"></span><br><span class="line">;=======	search loader.bin</span><br><span class="line">	mov	word	[SectorNo],	SectorNumOfRootDirStart ;保存根目录的起始扇区号，作为寻找的起点</span><br><span class="line"></span><br><span class="line">Lable_Search_In_Root_Dir_Begin:</span><br><span class="line"></span><br><span class="line">	cmp	word	[RootDirSizeForLoop],	0</span><br><span class="line">	jz	Label_No_LoaderBin</span><br><span class="line">	dec	word	[RootDirSizeForLoop]	;上面3行加上某处的跳转是一个循环，[RootDirSizeForLoop]初始是RootDirSectors，根目录的扇区数，然后不断自减1，每次循环遍历一个扇区。</span><br><span class="line">	</span><br><span class="line">	mov	ax,	00h</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	bx,	8000h</span><br><span class="line">	mov	ax,	[SectorNo]	;这里初始值是正确的，后面在Label_Goto_Next_Sector_In_Root_Dir会+1</span><br><span class="line">	mov	cl,	1</span><br><span class="line">	call	Func_ReadOneSector</span><br><span class="line">	;从软盘里读一个扇区放到内存</span><br><span class="line">	;前面几行是参数</span><br><span class="line">	;AX=待读取的磁盘起始扇区号 CL=读入的扇区数量 ES:BX=&gt;目标缓冲区起始地址</span><br><span class="line">	mov	si,	LoaderFileName	;这样[DS:SI]就是[LoaderFileName]了</span><br><span class="line">	mov	di,	8000h	;因为缓冲区从8000h开始</span><br><span class="line">	cld		;据说是清DF标志位，因为后面的LODSB指令与DF有关</span><br><span class="line">	;所以说上面3行是在为LODSB和比较做准备，下面是两层循环</span><br><span class="line">	mov	dx,	10h		;一个目录项32B，一个扇区512B里有16个，计数dx=10h</span><br><span class="line">	</span><br><span class="line">Label_Search_For_LoaderBin:</span><br><span class="line"></span><br><span class="line">	cmp	dx,	0</span><br><span class="line">	jz	Label_Goto_Next_Sector_In_Root_Dir</span><br><span class="line">	dec	dx</span><br><span class="line">	;上面的循环遍历一个扇区的所有目录项，遍历完了没找到就跳转。</span><br><span class="line">	mov	cx,	11		;文件名8B，扩展名3B，一共需要比较11B的内容</span><br><span class="line"></span><br><span class="line">Label_Cmp_FileName:</span><br><span class="line"></span><br><span class="line">	cmp	cx,	0</span><br><span class="line">	jz	Label_FileName_Found</span><br><span class="line">	dec	cx</span><br><span class="line">	;上面的循环遍历一个文件名+扩展名的11字节，都没发现不同就说明找到了 :)</span><br><span class="line">	lodsb	;从DS:SI指定的内存地址中读取数据到AL中，SI寄存器自动增减数据长度(这里是1B，DF=0增加反之减少)</span><br><span class="line">	cmp	al,	byte	[es:di]		;al是模板，[es:di]是从内存取的，es就是0了。</span><br><span class="line">	jz	Label_Go_On</span><br><span class="line">	jmp	Label_Different		</span><br><span class="line"></span><br><span class="line">Label_Go_On:</span><br><span class="line">	;相同则继续比较下一位，al不用处理因为lodsb自动处理了，di加一</span><br><span class="line">	inc	di</span><br><span class="line">	jmp	Label_Cmp_FileName</span><br><span class="line"></span><br><span class="line">Label_Different:</span><br><span class="line">	;不同则换扇区中的下一个目录项</span><br><span class="line">	and	di,	0ffe0h	;0x0ffe0 = 0b_0000_1111_1111_1110_0000，所以and是清零低5位，这5位描述一个目录项中的具体位置。</span><br><span class="line">	add	di,	20h		;0x00020 = 0b_0000_0000_0000_0010_0000，一个目录项32B，在bit6加1跳到下一个目录项。</span><br><span class="line">	mov	si,	LoaderFileName	;之前lodsb会更改si的值，这里复位</span><br><span class="line">	jmp	Label_Search_For_LoaderBin</span><br><span class="line"></span><br><span class="line">Label_Goto_Next_Sector_In_Root_Dir:</span><br><span class="line">	;扇区的目录项遍历完了会调到这里，扇区号加一，遍历下一个扇区</span><br><span class="line">	add	word	[SectorNo],	1</span><br><span class="line">	jmp	Lable_Search_In_Root_Dir_Begin</span><br><span class="line">	</span><br><span class="line">;=======	display on screen : ERROR:No LOADER Found</span><br><span class="line"></span><br><span class="line">Label_No_LoaderBin:</span><br><span class="line">	;根目录区所有目录项都找遍了，没找到Loader.bin, 利用INT 10h AH=13h 屏幕打印错误信息</span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	008ch</span><br><span class="line">	mov	dx,	0100h</span><br><span class="line">	mov	cx,	21</span><br><span class="line">	push	ax		;两个段寄存器之间不能直接传送</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	NoLoaderMessage</span><br><span class="line">	int	10h</span><br><span class="line">	jmp	$	;死循环</span><br><span class="line"></span><br><span class="line">;=======	found loader.bin name in root director struct</span><br><span class="line"></span><br><span class="line">Label_FileName_Found:</span><br><span class="line">	;找到了</span><br><span class="line">	mov	ax,	RootDirSectors	;ax放入根目录占用的扇区数</span><br><span class="line">	and	di,	0ffe0h	;0x0ffe0 = 0b_0000_1111_1111_1110_0000；di是当前目录项的位置，and得到基地址</span><br><span class="line">	add	di,	01ah	;0x01a = 26，add得到起始簇号的位置</span><br><span class="line">	mov	cx,	word	[es:di]	;把起始簇号读到cx中</span><br><span class="line">	push	cx		;压栈保存文件的起始簇号</span><br><span class="line">	add	cx,	ax		;因为这个软盘1簇就是1扇区，所以可以直接相加</span><br><span class="line">	add	cx,	SectorBalance</span><br><span class="line">	;上面这两行计算数据区的扇区地址</span><br><span class="line">	mov	ax,	BaseOfLoader</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	bx,	OffsetOfLoader</span><br><span class="line">	;es放基地址，bx放偏移作为Func_ReadOneSector的参数</span><br><span class="line">	mov	ax,	cx ;ax放入扇区地址作为Func_ReadOneSector的参数</span><br><span class="line"></span><br><span class="line">Label_Go_On_Loading_File:</span><br><span class="line">	push	ax</span><br><span class="line">	push	bx</span><br><span class="line">	mov	ah,	0eh</span><br><span class="line">	mov	al,	&#x27;.&#x27;	;待显示字符是一个点</span><br><span class="line">	mov	bl,	0fh	;白色高亮背景黑不闪烁</span><br><span class="line">	int	10h	;INT 10h, AH=0Eh 在屏幕上显示一个字符</span><br><span class="line">	pop	bx</span><br><span class="line">	pop	ax</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">	mov	cl,	1	;读1个扇区</span><br><span class="line">	call	Func_ReadOneSector	;缓冲区在ES:BX</span><br><span class="line">	pop	ax	;之前有一个push cx, 压栈保存文件的起始簇号，这里把它弹栈放在ax里，后面有push ax，同样是保存文件的一个簇号。</span><br><span class="line">	</span><br><span class="line">	call	Func_GetFATEntry	;看下一个簇号</span><br><span class="line">	cmp	ax,	0fffh</span><br><span class="line">	jz	Label_File_Loaded		;如果下一个簇号是0fffh，说明加载完毕了</span><br><span class="line">	push	ax					;保存下一个簇号</span><br><span class="line">	mov	dx,	RootDirSectors		;根目录占用扇区数</span><br><span class="line">	add	ax,	dx</span><br><span class="line">	add	ax,	SectorBalance</span><br><span class="line">	;算下一个簇号所在的扇区位置，作为Func_ReadOneSector的参数</span><br><span class="line">	add	bx,	[BPB_BytesPerSec]	;缓冲区输出指针后移一个簇</span><br><span class="line">	jmp	Label_Go_On_Loading_File</span><br><span class="line"></span><br><span class="line">Label_File_Loaded:</span><br><span class="line">	</span><br><span class="line">	jmp	BaseOfLoader:OffsetOfLoader</span><br><span class="line">	;这是段间地址跳转，从当前段跳到另一个段中。</span><br><span class="line">	;必须明确指定目标段BaseOfLoader和目标段内偏移地址OffsetOfLoader</span><br><span class="line"></span><br><span class="line">;=======	read one sector from floppy</span><br><span class="line">;从软盘里读一个扇区放到内存，函数，是对INT 13h的一个封装。</span><br><span class="line">;	AX=待读取的磁盘起始扇区号 CL=读入的扇区数量 ES:BX=&gt;目标缓冲区起始地址</span><br><span class="line">;INT 13h, AH=02h：读取磁盘扇区</span><br><span class="line">;	AL=读入的扇区数 CH:CL=&gt;磁道号(柱面号)低8位:扇区号1~63(bit0~5)磁道号(柱面号)高2位(bit6~7，只对硬盘有效)</span><br><span class="line">;	DH:DL=&gt;磁头号:驱动器号(如果操作的是磁盘驱动器，bit7必须被置位)</span><br><span class="line">;	ES:BX=&gt;数据缓冲区</span><br><span class="line">;所以这个函数完成从Logical Block Address到Cylinder/Head/Sector的地址转换</span><br><span class="line">;转换公式：LBA = 2*C*N + H*N + S - 1 其中LBA, C, H, S在上一行，N是每个磁道的扇区数。</span><br><span class="line">;所以先做除法，然后根据余数和商得到C/H/S</span><br><span class="line">;</span><br><span class="line">Func_ReadOneSector:</span><br><span class="line">	;调用函数之前，AX, CL, ES:BX是就位的，这一点需要注意</span><br><span class="line">	push	bp</span><br><span class="line">	mov	bp,	sp</span><br><span class="line">	sub	esp,	2</span><br><span class="line">	;还是关于调用多写一些东西吧。上面这三行完成了两件事情：保存上一个过程的现场 和 为这个过程开辟栈地址空间</span><br><span class="line">	;push指令将上一个过程的bp压栈(bp指向一个过程的栈地址空间中的“底部”，标识这个过程的一些数据在栈地址空间的位置)</span><br><span class="line">	;mov指令将指向栈顶的地址（栈指针）sp赋给bp，作为这个过程的“底部”</span><br><span class="line">	;sub指令将栈指针esp（sp的32位扩展）减2，这样就有了可以存东西的空间（可以用bp表示）</span><br><span class="line">	mov	byte	[bp - 2],	cl</span><br><span class="line">	;将CL存在我们开辟的空间中，因为输入的CL和输出的CL完全不一样，现在先保存一下数值。</span><br><span class="line">	push	bx</span><br><span class="line">	;先借用一下bx寄存器，所以先压栈，后面pop的时候再把值还给bx</span><br><span class="line">	mov	bl,	[BPB_SecPerTrk]</span><br><span class="line">	div	bl	;ax/bl 16位/8位 result: AH:AL=&gt;余数:商</span><br><span class="line">	;上面这两行就是“先做除法”</span><br><span class="line">	inc	ah</span><br><span class="line">	mov	cl,	ah</span><br><span class="line">	;余数自加一得到扇区号放在cl，目前我们用的是软盘，高位不用管</span><br><span class="line">	mov	dh,	al</span><br><span class="line">	shr	al,	1</span><br><span class="line">	mov	ch,	al</span><br><span class="line">	and	dh,	1</span><br><span class="line">	;四行做了两件事：商右移1位得到磁道号放在ch 和 商取最低位看看是磁头是0还是1放在dh(实际是先放在dh然后再过滤最低位)</span><br><span class="line">	pop	bx</span><br><span class="line">	mov	dl,	[BS_DrvNum]</span><br><span class="line">	;dl放驱动器号</span><br><span class="line">Label_Go_On_Reading:</span><br><span class="line">	mov	ah,	2</span><br><span class="line">	mov	al,	byte	[bp - 2]</span><br><span class="line">	;设置ah和al</span><br><span class="line">	int	13h</span><br><span class="line">	jc	Label_Go_On_Reading</span><br><span class="line">	;没读取成功，进位CF为1，就跳转到上面继续读，读取成功CF复位0就继续执行下面的指令</span><br><span class="line">	add	esp,	2</span><br><span class="line">	pop	bp</span><br><span class="line">	;上面两行相当于leave</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">;=======	get FAT Entry</span><br><span class="line"></span><br><span class="line">Func_GetFATEntry:</span><br><span class="line">	;解析FAT表项，根据当前FAT表项索引出下一个表项</span><br><span class="line">	;AX=FAT表项号（I/O）</span><br><span class="line">	push	es</span><br><span class="line">	push	bx</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	00</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	byte	[Odd],	0</span><br><span class="line">	mov	bx,	3</span><br><span class="line">	mul	bx	;这里16位乘法，高位在DX中保存（实际上因为表项号范围较小，高位DX这时为0）</span><br><span class="line">	mov	bx,	2</span><br><span class="line">	div	bx	;除以16位bx，实际上是DX:AX为被除数。结果DX保存余数，AX保存商。</span><br><span class="line">	;这里乘3除2的原因是，FAT12中，每个表项12bit=1.5B，为了得到表项号的确切位置，我们这样操作。</span><br><span class="line">	;如果刚好整除（偶），那么最后的商就是相应的字节位置。</span><br><span class="line">	;如果没被整除（奇），那么最后的商并不是相应的字节位置，还需要下数半个字节</span><br><span class="line">	cmp	dx,	0	;用余数判断奇偶</span><br><span class="line">	jz	Label_Even</span><br><span class="line">	mov	byte	[Odd],	1</span><br><span class="line">	;如果是偶，则跳过这一行，标记位[Odd]是0；反之[Odd]设为1</span><br><span class="line">Label_Even:</span><br><span class="line">	</span><br><span class="line">	xor	dx,	dx	;DX清零，因为下面的DIV需要用到这个寄存器</span><br><span class="line">	mov	bx,	[BPB_BytesPerSec]	;读取每扇区的字节数放在BX里</span><br><span class="line">	div	bx	; DX:AX/BX 字节位置/每扇区字节数 得到 偏移扇区号(AX)和扇区中偏移位置(DX) </span><br><span class="line">	push	dx</span><br><span class="line">	;先不管扇区偏移位置，我们先读扇区。</span><br><span class="line">	;考虑到可能跨扇区(512不能被1.5整除)，我们靠Func_ReadOneSector读出2个扇区</span><br><span class="line">	mov	bx,	8000h	;输出缓冲区位置</span><br><span class="line">	add	ax,	SectorNumOfFAT1Start	;扇区地址 = FAT1表基地址 + 扇区偏移</span><br><span class="line">	mov	cl,	2</span><br><span class="line">	call	Func_ReadOneSector</span><br><span class="line">	pop	dx</span><br><span class="line">	add	bx,	dx	;字节位置 = 缓冲区基地址 + 字节位置偏移</span><br><span class="line">	mov	ax,	[es:bx]	;这个es一开始就是0不用管它，先从bx处读2字节</span><br><span class="line">	cmp	byte	[Odd],	1	;判断奇偶</span><br><span class="line">	jnz	Label_Even_2	;偶跳转</span><br><span class="line">	shr	ax,	4	;奇右移4位，因为低位在“右边”</span><br><span class="line"></span><br><span class="line">Label_Even_2:</span><br><span class="line">	and	ax,	0fffh		;然后直接取最低12bit</span><br><span class="line">	pop	bx</span><br><span class="line">	pop	es</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">;=======	tmp variable</span><br><span class="line"></span><br><span class="line">RootDirSizeForLoop	dw	RootDirSectors</span><br><span class="line">SectorNo		dw	0</span><br><span class="line">Odd			db	0</span><br><span class="line"></span><br><span class="line">;=======	display messages</span><br><span class="line"></span><br><span class="line">StartBootMessage:	db	&quot;Start Boot&quot;</span><br><span class="line">NoLoaderMessage:	db	&quot;ERROR:No LOADER Found&quot;</span><br><span class="line">LoaderFileName:		db	&quot;LOADER  BIN&quot;,0	;8B文件名 3B扩展名，0就是字符串\0结尾，因为我们限制了长度11B，所以没有考虑&#x27;\0&#x27;</span><br><span class="line"></span><br><span class="line">;=======	fill zero until whole sector</span><br><span class="line"></span><br><span class="line">	times	510 - ($ - $$)	db	0</span><br><span class="line">	dw	0xaa55</span><br></pre></td></tr></table></figure>

<h3 id="Loader引导程序"><a href="#Loader引导程序" class="headerlink" title="Loader引导程序"></a>Loader引导程序</h3><p>书上有一个简版的Loader程序用以测试上面的boot，我觉得没啥意思，直接上正式版，有点长，700多行。。</p>
<blockquote>
<p>参考：<br><a href="https://mp.weixin.qq.com/s/VGhpbZaeyVwq3Ghs2E6eEw">从实模式到保护模式</a><br><a href="https://blog.csdn.net/baidu_31504167/article/details/100982379">0x66和0x67前缀</a><br><a href="https://blog.csdn.net/weixin_42707324/article/details/108306596">INT 15h AX&#x3D;E820h用法</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;篇幅有限，删去了源文件中的版权声明。版权归原作者，仅供学习交流使用</span><br><span class="line">org	10000h	;因为上面的boot引导“规定”，BaseOfLoader 0x1000  OffsetOfLoader 0x00 Addr = Base &lt;&lt; 4 + Offset</span><br><span class="line">;跳转的时候会跳转到10000h所以必须放在这里</span><br><span class="line">	jmp	Label_Start</span><br><span class="line"></span><br><span class="line">%include	&quot;fat12.inc&quot;</span><br><span class="line"></span><br><span class="line">BaseOfKernelFile	equ	0x00</span><br><span class="line">OffsetOfKernelFile	equ	0x100000	;把内核文件放在1MB处，简单方便</span><br><span class="line"></span><br><span class="line">BaseTmpOfKernelAddr	equ	0x00</span><br><span class="line">OffsetTmpOfKernelFile	equ	0x7E00	;因为BIOS实模式下只支持上限为1MB的寻址，我们需要先临时放在这里再用特殊手段放在1MB处</span><br><span class="line"></span><br><span class="line">MemoryStructBufferAddr	equ	0x7E00	;也可以将这段空间用作内存结构数据的存储空间</span><br><span class="line"></span><br><span class="line">[SECTION gdt]</span><br><span class="line">;创建临时GDT表</span><br><span class="line"></span><br><span class="line">LABEL_GDT:		dd	0,0</span><br><span class="line">LABEL_DESC_CODE32:	dd	0x0000FFFF,0x00CF9A00</span><br><span class="line">LABEL_DESC_DATA32:	dd	0x0000FFFF,0x00CF9200</span><br><span class="line"></span><br><span class="line">GdtLen	equ	$ - LABEL_GDT</span><br><span class="line">GdtPtr	dw	GdtLen - 1</span><br><span class="line">	dd	LABEL_GDT</span><br><span class="line"></span><br><span class="line">SelectorCode32	equ	LABEL_DESC_CODE32 - LABEL_GDT</span><br><span class="line">SelectorData32	equ	LABEL_DESC_DATA32 - LABEL_GDT</span><br><span class="line"></span><br><span class="line">[SECTION gdt64]</span><br><span class="line"></span><br><span class="line">LABEL_GDT64:		dq	0x0000000000000000</span><br><span class="line">LABEL_DESC_CODE64:	dq	0x0020980000000000</span><br><span class="line">LABEL_DESC_DATA64:	dq	0x0000920000000000</span><br><span class="line"></span><br><span class="line">GdtLen64	equ	$ - LABEL_GDT64</span><br><span class="line">GdtPtr64	dw	GdtLen64 - 1</span><br><span class="line">		dd	LABEL_GDT64</span><br><span class="line"></span><br><span class="line">SelectorCode64	equ	LABEL_DESC_CODE64 - LABEL_GDT64</span><br><span class="line">SelectorData64	equ	LABEL_DESC_DATA64 - LABEL_GDT64</span><br><span class="line"></span><br><span class="line">[SECTION .s16]	;定义一个名为.s16的段</span><br><span class="line">[BITS 16]		;通知NASM编译器使用16位宽模式</span><br><span class="line">				;在这个模式下，使用32bit数据指令需要在指令前加0x66前缀，地址指令需要加的前缀是0x67</span><br><span class="line"></span><br><span class="line">Label_Start:</span><br><span class="line"></span><br><span class="line">	mov	ax,	cs</span><br><span class="line">	mov	ds,	ax</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	ax,	0x00</span><br><span class="line">	mov	ss,	ax</span><br><span class="line">	mov	sp,	0x7c00	;????这里栈指针为什么依然是0x7c00，估计就是定一个位置，只要不直接pop出未定义的东西，就问题不大</span><br><span class="line"></span><br><span class="line">;=======	display on screen : Start Loader......</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000fh</span><br><span class="line">	mov	dx,	0200h		;row 2</span><br><span class="line">	mov	cx,	12</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	StartLoaderMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	open address A20</span><br><span class="line">	;开启地址A20功能</span><br><span class="line">	;A20功能控制是否只有低20位地址有效，默认A20地址线被禁用。</span><br><span class="line">	;开启A20功能有多种方式，详见P57</span><br><span class="line">	;这里采用A20快速门(Fast Gate A20)，使用I/O端口0x92来处理A20信号线，置位0x92端口的第1位（而不是第0位）</span><br><span class="line">	push	ax</span><br><span class="line">	in	al,	92h</span><br><span class="line">	or	al,	00000010b</span><br><span class="line">	out	92h,	al</span><br><span class="line">	pop	ax</span><br><span class="line"></span><br><span class="line">	cli	;关闭外部中断，所有外部中断都被屏蔽，保证当前运行的代码不被打断，保护代码运行。</span><br><span class="line"></span><br><span class="line">	db	0x66	;应该是NASM不能自动添加前缀，这里补上的，那么可不可以使用dword呢？	</span><br><span class="line">	lgdt	[GdtPtr]	;加载保护模式结构数据信息	</span><br><span class="line"></span><br><span class="line">	mov	eax,	cr0</span><br><span class="line">	or	eax,	1</span><br><span class="line">	mov	cr0,	eax		;置位CR0寄存器第0位开启保护模式</span><br><span class="line"></span><br><span class="line">	mov	ax,	SelectorData32	</span><br><span class="line">	mov	fs,	ax			;将新的数据段值加载到fs中</span><br><span class="line">	mov	eax,	cr0</span><br><span class="line">	and	al,	11111110b	</span><br><span class="line">	mov	cr0,	eax		;开启实模式</span><br><span class="line"></span><br><span class="line">	sti					;开启外部中断</span><br><span class="line">	;这就是Big Real Mode</span><br><span class="line"></span><br><span class="line">;=======	reset floppy</span><br><span class="line"></span><br><span class="line">	xor	ah,	ah</span><br><span class="line">	xor	dl,	dl</span><br><span class="line">	int	13h</span><br><span class="line"></span><br><span class="line">;=======	search kernel.bin</span><br><span class="line">;和上面的搜索loader.bin相似</span><br><span class="line">	mov	word	[SectorNo],	SectorNumOfRootDirStart</span><br><span class="line"></span><br><span class="line">Lable_Search_In_Root_Dir_Begin:</span><br><span class="line"></span><br><span class="line">	cmp	word	[RootDirSizeForLoop],	0</span><br><span class="line">	jz	Label_No_LoaderBin</span><br><span class="line">	dec	word	[RootDirSizeForLoop]	</span><br><span class="line">	mov	ax,	00h</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	bx,	8000h</span><br><span class="line">	mov	ax,	[SectorNo]</span><br><span class="line">	mov	cl,	1</span><br><span class="line">	call	Func_ReadOneSector</span><br><span class="line">	mov	si,	KernelFileName</span><br><span class="line">	mov	di,	8000h</span><br><span class="line">	cld</span><br><span class="line">	mov	dx,	10h</span><br><span class="line">	</span><br><span class="line">Label_Search_For_LoaderBin:</span><br><span class="line"></span><br><span class="line">	cmp	dx,	0</span><br><span class="line">	jz	Label_Goto_Next_Sector_In_Root_Dir</span><br><span class="line">	dec	dx</span><br><span class="line">	mov	cx,	11</span><br><span class="line"></span><br><span class="line">Label_Cmp_FileName:</span><br><span class="line"></span><br><span class="line">	cmp	cx,	0</span><br><span class="line">	jz	Label_FileName_Found</span><br><span class="line">	dec	cx</span><br><span class="line">	lodsb	</span><br><span class="line">	cmp	al,	byte	[es:di]</span><br><span class="line">	jz	Label_Go_On</span><br><span class="line">	jmp	Label_Different</span><br><span class="line"></span><br><span class="line">Label_Go_On:</span><br><span class="line">	</span><br><span class="line">	inc	di</span><br><span class="line">	jmp	Label_Cmp_FileName</span><br><span class="line"></span><br><span class="line">Label_Different:</span><br><span class="line"></span><br><span class="line">	and	di,	0FFE0h</span><br><span class="line">	add	di,	20h</span><br><span class="line">	mov	si,	KernelFileName</span><br><span class="line">	jmp	Label_Search_For_LoaderBin</span><br><span class="line"></span><br><span class="line">Label_Goto_Next_Sector_In_Root_Dir:</span><br><span class="line">	</span><br><span class="line">	add	word	[SectorNo],	1</span><br><span class="line">	jmp	Lable_Search_In_Root_Dir_Begin</span><br><span class="line">	</span><br><span class="line">;=======	display on screen : ERROR:No KERNEL Found</span><br><span class="line"></span><br><span class="line">Label_No_LoaderBin:	;哈哈，这标签，看来原作者是把这部分直接“复用”了</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	008Ch</span><br><span class="line">	mov	dx,	0300h		;row 3</span><br><span class="line">	mov	cx,	21</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	NoLoaderMessage</span><br><span class="line">	int	10h</span><br><span class="line">	jmp	$</span><br><span class="line"></span><br><span class="line">;=======	found loader.bin name in root director struct</span><br><span class="line"></span><br><span class="line">Label_FileName_Found:</span><br><span class="line">	mov	ax,	RootDirSectors</span><br><span class="line">	and	di,	0FFE0h</span><br><span class="line">	add	di,	01Ah</span><br><span class="line">	mov	cx,	word	[es:di]</span><br><span class="line">	push	cx</span><br><span class="line">	add	cx,	ax</span><br><span class="line">	add	cx,	SectorBalance</span><br><span class="line">	mov	eax,	BaseTmpOfKernelAddr	;BaseOfKernelFile	;为什么这里使用eax寄存器？我猜是写错了。</span><br><span class="line">	mov	es,	eax</span><br><span class="line">	mov	bx,	OffsetTmpOfKernelFile	;OffsetOfKernelFile	;为什么这里又不用ebx寄存器了呢？</span><br><span class="line">	mov	ax,	cx</span><br><span class="line"></span><br><span class="line">Label_Go_On_Loading_File:</span><br><span class="line">	push	ax</span><br><span class="line">	push	bx</span><br><span class="line">	mov	ah,	0Eh</span><br><span class="line">	mov	al,	&#x27;.&#x27;</span><br><span class="line">	mov	bl,	0Fh</span><br><span class="line">	int	10h</span><br><span class="line">	pop	bx</span><br><span class="line">	pop	ax</span><br><span class="line"></span><br><span class="line">	mov	cl,	1</span><br><span class="line">	call	Func_ReadOneSector</span><br><span class="line">	pop	ax</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;;	</span><br><span class="line">	push	cx</span><br><span class="line">	push	eax</span><br><span class="line">	push	fs		</span><br><span class="line">	push	edi</span><br><span class="line">	push	ds</span><br><span class="line">	push	esi</span><br><span class="line"></span><br><span class="line">	mov	cx,	200h	;一个扇区的字节数，用作下面loop指令循环自减</span><br><span class="line">	mov	ax,	BaseOfKernelFile</span><br><span class="line">	mov	fs,	ax			;这里在 物理机 会出错，实际上也没什么用。</span><br><span class="line">	mov	edi,	dword	[OffsetOfKernelFileCount]</span><br><span class="line"></span><br><span class="line">	mov	ax,	BaseTmpOfKernelAddr</span><br><span class="line">	mov	ds,	ax</span><br><span class="line">	mov	esi,	OffsetTmpOfKernelFile</span><br><span class="line"></span><br><span class="line">Label_Mov_Kernel:	;------------------</span><br><span class="line">;一个字节一个字节地从临时存储区复制到1MB的地方</span><br><span class="line">	</span><br><span class="line">	mov	al,	byte	[ds:esi]</span><br><span class="line">	mov	byte	[fs:edi],	al</span><br><span class="line"></span><br><span class="line">	inc	esi</span><br><span class="line">	inc	edi</span><br><span class="line"></span><br><span class="line">	loop	Label_Mov_Kernel</span><br><span class="line"></span><br><span class="line">	mov	eax,	0x1000</span><br><span class="line">	mov	ds,	eax</span><br><span class="line"></span><br><span class="line">	mov	dword	[OffsetOfKernelFileCount],	edi</span><br><span class="line"></span><br><span class="line">	pop	esi</span><br><span class="line">	pop	ds</span><br><span class="line">	pop	edi</span><br><span class="line">	pop	fs</span><br><span class="line">	pop	eax</span><br><span class="line">	pop	cx</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;;	</span><br><span class="line"></span><br><span class="line">	call	Func_GetFATEntry</span><br><span class="line">	cmp	ax,	0FFFh</span><br><span class="line">	jz	Label_File_Loaded</span><br><span class="line">	push	ax</span><br><span class="line">	mov	dx,	RootDirSectors</span><br><span class="line">	add	ax,	dx</span><br><span class="line">	add	ax,	SectorBalance</span><br><span class="line"></span><br><span class="line">	jmp	Label_Go_On_Loading_File</span><br><span class="line"></span><br><span class="line">Label_File_Loaded:</span><br><span class="line">		</span><br><span class="line">	mov	ax, 0B800h</span><br><span class="line">	mov	gs, ax</span><br><span class="line">	mov	ah, 0Fh				; 0000: 黑底    1111: 白字</span><br><span class="line">	mov	al, &#x27;G&#x27;</span><br><span class="line">	mov	[gs:((80 * 0 + 39) * 2)], ax	; 屏幕第 0 行, 第 39 列。</span><br><span class="line">	;显示字符的另一种玩法，从内存地址0B800h开始是一段专门用于显示字符的内存空间，这里就是在操作显示内存</span><br><span class="line"></span><br><span class="line">KillMotor:</span><br><span class="line">	;操作系统内核加载完毕，关闭软驱马达（暂时用不到了）</span><br><span class="line">	;通过向I/O端口3F2h写入控制命令实现</span><br><span class="line">	push	dx</span><br><span class="line">	mov	dx,	03F2h</span><br><span class="line">	;out指令的源操作数可以选用AL/AX/EAX寄存器；目的操作数可以是立即数（只能8位宽）或DX寄存器（可以取到16位宽）</span><br><span class="line">	mov	al,	0	</span><br><span class="line">	out	dx,	al</span><br><span class="line">	pop	dx</span><br><span class="line"></span><br><span class="line">;=======	get memory address size type</span><br><span class="line">;下面，临时转存空间将用于保存物理地址空间信息</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000Fh</span><br><span class="line">	mov	dx,	0400h		;row 4</span><br><span class="line">	mov	cx,	24</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	StartGetMemStructMessage</span><br><span class="line">	int	10h</span><br><span class="line">	;显示消息</span><br><span class="line"></span><br><span class="line">	mov	ebx,	0</span><br><span class="line">	mov	ax,	0x00</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	di,	MemoryStructBufferAddr	</span><br><span class="line"></span><br><span class="line">Label_Get_Mem_Struct:</span><br><span class="line"></span><br><span class="line">	mov	eax,	0x0E820</span><br><span class="line">	mov	ecx,	20</span><br><span class="line">	mov	edx,	0x534D4150</span><br><span class="line">	int	15h</span><br><span class="line">	;就是通过调用INT 15h获取物理地址空间信息，详见上面的参考</span><br><span class="line">	jc	Label_Get_Mem_Fail</span><br><span class="line">	add	di,	20</span><br><span class="line">	;物理地址空间信息结构占20B，di+20为了读下一个</span><br><span class="line"></span><br><span class="line">	cmp	ebx,	0</span><br><span class="line">	jne	Label_Get_Mem_Struct</span><br><span class="line">	;不为0说明还有信息</span><br><span class="line">	jmp	Label_Get_Mem_OK</span><br><span class="line"></span><br><span class="line">Label_Get_Mem_Fail:</span><br><span class="line">	;显示消息然后死循环</span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	008Ch</span><br><span class="line">	mov	dx,	0500h		;row 5</span><br><span class="line">	mov	cx,	23</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	GetMemStructErrMessage</span><br><span class="line">	int	10h</span><br><span class="line">	jmp	$</span><br><span class="line"></span><br><span class="line">Label_Get_Mem_OK:</span><br><span class="line">	</span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000Fh</span><br><span class="line">	mov	dx,	0600h		;row 6</span><br><span class="line">	mov	cx,	29</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	GetMemStructOKMessage</span><br><span class="line">	int	10h	</span><br><span class="line">	;显示消息</span><br><span class="line"></span><br><span class="line">;=======	get SVGA information</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000Fh</span><br><span class="line">	mov	dx,	0800h		;row 8</span><br><span class="line">	mov	cx,	23</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	StartGetSVGAVBEInfoMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">	mov	ax,	0x00</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	di,	0x8000</span><br><span class="line">	mov	ax,	4F00h</span><br><span class="line"></span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">	cmp	ax,	004Fh</span><br><span class="line"></span><br><span class="line">	jz	.KO</span><br><span class="line">	</span><br><span class="line">;=======	Fail</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	008Ch</span><br><span class="line">	mov	dx,	0900h		;row 9</span><br><span class="line">	mov	cx,	23</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	GetSVGAVBEInfoErrMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">	jmp	$</span><br><span class="line"></span><br><span class="line">.KO:</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000Fh</span><br><span class="line">	mov	dx,	0A00h		;row 10</span><br><span class="line">	mov	cx,	29</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	GetSVGAVBEInfoOKMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	Get SVGA Mode Info</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000Fh</span><br><span class="line">	mov	dx,	0C00h		;row 12</span><br><span class="line">	mov	cx,	24</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	StartGetSVGAModeInfoMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	mov	ax,	0x00</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	si,	0x800e</span><br><span class="line"></span><br><span class="line">	mov	esi,	dword	[es:si]</span><br><span class="line">	mov	edi,	0x8200</span><br><span class="line"></span><br><span class="line">Label_SVGA_Mode_Info_Get:</span><br><span class="line"></span><br><span class="line">	mov	cx,	word	[es:esi]</span><br><span class="line"></span><br><span class="line">;=======	display SVGA mode information</span><br><span class="line"></span><br><span class="line">	push	ax</span><br><span class="line">	</span><br><span class="line">	mov	ax,	00h</span><br><span class="line">	mov	al,	ch</span><br><span class="line">	call	Label_DispAL</span><br><span class="line"></span><br><span class="line">	mov	ax,	00h</span><br><span class="line">	mov	al,	cl	</span><br><span class="line">	call	Label_DispAL</span><br><span class="line">	</span><br><span class="line">	pop	ax</span><br><span class="line"></span><br><span class="line">;=======</span><br><span class="line">	</span><br><span class="line">	cmp	cx,	0FFFFh</span><br><span class="line">	jz	Label_SVGA_Mode_Info_Finish</span><br><span class="line"></span><br><span class="line">	mov	ax,	4F01h</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">	cmp	ax,	004Fh</span><br><span class="line"></span><br><span class="line">	jnz	Label_SVGA_Mode_Info_FAIL	</span><br><span class="line"></span><br><span class="line">	add	esi,	2</span><br><span class="line">	add	edi,	0x100</span><br><span class="line"></span><br><span class="line">	jmp	Label_SVGA_Mode_Info_Get</span><br><span class="line">		</span><br><span class="line">Label_SVGA_Mode_Info_FAIL:</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	008Ch</span><br><span class="line">	mov	dx,	0D00h		;row 13</span><br><span class="line">	mov	cx,	24</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	GetSVGAModeInfoErrMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">Label_SET_SVGA_Mode_VESA_VBE_FAIL:</span><br><span class="line"></span><br><span class="line">	jmp	$</span><br><span class="line"></span><br><span class="line">Label_SVGA_Mode_Info_Finish:</span><br><span class="line"></span><br><span class="line">	mov	ax,	1301h</span><br><span class="line">	mov	bx,	000Fh</span><br><span class="line">	mov	dx,	0E00h		;row 14</span><br><span class="line">	mov	cx,	30</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	ds</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	bp,	GetSVGAModeInfoOKMessage</span><br><span class="line">	int	10h</span><br><span class="line"></span><br><span class="line">;=======	set the SVGA mode(VESA VBE)</span><br><span class="line"></span><br><span class="line">	mov	ax,	4F02h</span><br><span class="line">	mov	bx,	4180h	;========================mode : 0x180 or 0x143详见P64</span><br><span class="line">	int 	10h</span><br><span class="line"></span><br><span class="line">	cmp	ax,	004Fh</span><br><span class="line">	jnz	Label_SET_SVGA_Mode_VESA_VBE_FAIL</span><br><span class="line"></span><br><span class="line">;=======	init IDT GDT goto protect mode </span><br><span class="line">;</span><br><span class="line">	cli			;======close interrupt</span><br><span class="line"></span><br><span class="line">	db	0x66</span><br><span class="line">	lgdt	[GdtPtr]</span><br><span class="line"></span><br><span class="line">;	db	0x66</span><br><span class="line">;	lidt	[IDT_POINTER]</span><br><span class="line"></span><br><span class="line">	mov	eax,	cr0</span><br><span class="line">	or	eax,	1</span><br><span class="line">	mov	cr0,	eax	</span><br><span class="line"></span><br><span class="line">	jmp	dword SelectorCode32:GO_TO_TMP_Protect</span><br><span class="line"></span><br><span class="line">[SECTION .s32]</span><br><span class="line">[BITS 32]</span><br><span class="line"></span><br><span class="line">GO_TO_TMP_Protect:</span><br><span class="line"></span><br><span class="line">;=======	go to tmp long mode</span><br><span class="line"></span><br><span class="line">	mov	ax,	0x10</span><br><span class="line">	mov	ds,	ax</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	fs,	ax</span><br><span class="line">	mov	ss,	ax</span><br><span class="line">	mov	esp,	7E00h</span><br><span class="line"></span><br><span class="line">	call	support_long_mode</span><br><span class="line">	test	eax,	eax</span><br><span class="line"></span><br><span class="line">	jz	no_support</span><br><span class="line"></span><br><span class="line">;=======	init temporary page table 0x90000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x90000],	0x91007</span><br><span class="line">	mov	dword	[0x90004],	0x00000</span><br><span class="line">	mov	dword	[0x90800],	0x91007</span><br><span class="line">	mov	dword	[0x90804],	0x00000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x91000],	0x92007</span><br><span class="line">	mov	dword	[0x91004],	0x00000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x92000],	0x000083</span><br><span class="line">	mov	dword	[0x92004],	0x000000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x92008],	0x200083</span><br><span class="line">	mov	dword	[0x9200c],	0x000000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x92010],	0x400083</span><br><span class="line">	mov	dword	[0x92014],	0x000000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x92018],	0x600083</span><br><span class="line">	mov	dword	[0x9201c],	0x000000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x92020],	0x800083</span><br><span class="line">	mov	dword	[0x92024],	0x000000</span><br><span class="line"></span><br><span class="line">	mov	dword	[0x92028],	0xa00083</span><br><span class="line">	mov	dword	[0x9202c],	0x000000</span><br><span class="line"></span><br><span class="line">;=======	load GDTR</span><br><span class="line"></span><br><span class="line">	db	0x66</span><br><span class="line">	lgdt	[GdtPtr64]</span><br><span class="line">	mov	ax,	0x10</span><br><span class="line">	mov	ds,	ax</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	mov	fs,	ax</span><br><span class="line">	mov	gs,	ax</span><br><span class="line">	mov	ss,	ax</span><br><span class="line"></span><br><span class="line">	mov	esp,	7E00h</span><br><span class="line"></span><br><span class="line">;=======	open PAE</span><br><span class="line"></span><br><span class="line">	mov	eax,	cr4</span><br><span class="line">	bts	eax,	5</span><br><span class="line">	mov	cr4,	eax</span><br><span class="line"></span><br><span class="line">;=======	load	cr3</span><br><span class="line"></span><br><span class="line">	mov	eax,	0x90000</span><br><span class="line">	mov	cr3,	eax</span><br><span class="line"></span><br><span class="line">;=======	enable long-mode</span><br><span class="line"></span><br><span class="line">	mov	ecx,	0C0000080h		;IA32_EFER</span><br><span class="line">	rdmsr</span><br><span class="line"></span><br><span class="line">	bts	eax,	8</span><br><span class="line">	wrmsr</span><br><span class="line"></span><br><span class="line">;=======	open PE and paging</span><br><span class="line"></span><br><span class="line">	mov	eax,	cr0</span><br><span class="line">	bts	eax,	0</span><br><span class="line">	bts	eax,	31</span><br><span class="line">	mov	cr0,	eax</span><br><span class="line"></span><br><span class="line">	jmp	SelectorCode64:OffsetOfKernelFile</span><br><span class="line"></span><br><span class="line">;=======	test support long mode or not</span><br><span class="line"></span><br><span class="line">support_long_mode:</span><br><span class="line"></span><br><span class="line">	mov	eax,	0x80000000</span><br><span class="line">	cpuid</span><br><span class="line">	cmp	eax,	0x80000001</span><br><span class="line">	setnb	al	</span><br><span class="line">	jb	support_long_mode_done</span><br><span class="line">	mov	eax,	0x80000001</span><br><span class="line">	cpuid</span><br><span class="line">	bt	edx,	29</span><br><span class="line">	setc	al</span><br><span class="line">support_long_mode_done:</span><br><span class="line">	</span><br><span class="line">	movzx	eax,	al</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">;=======	no support</span><br><span class="line"></span><br><span class="line">no_support:</span><br><span class="line">	jmp	$</span><br><span class="line"></span><br><span class="line">;=======	read one sector from floppy</span><br><span class="line"></span><br><span class="line">[SECTION .s16lib]</span><br><span class="line">[BITS 16]</span><br><span class="line"></span><br><span class="line">Func_ReadOneSector:</span><br><span class="line">	</span><br><span class="line">	push	bp</span><br><span class="line">	mov	bp,	sp</span><br><span class="line">	sub	esp,	2</span><br><span class="line">	mov	byte	[bp - 2],	cl</span><br><span class="line">	push	bx</span><br><span class="line">	mov	bl,	[BPB_SecPerTrk]</span><br><span class="line">	div	bl</span><br><span class="line">	inc	ah</span><br><span class="line">	mov	cl,	ah</span><br><span class="line">	mov	dh,	al</span><br><span class="line">	shr	al,	1</span><br><span class="line">	mov	ch,	al</span><br><span class="line">	and	dh,	1</span><br><span class="line">	pop	bx</span><br><span class="line">	mov	dl,	[BS_DrvNum]</span><br><span class="line">Label_Go_On_Reading:</span><br><span class="line">	mov	ah,	2</span><br><span class="line">	mov	al,	byte	[bp - 2]</span><br><span class="line">	int	13h</span><br><span class="line">	jc	Label_Go_On_Reading</span><br><span class="line">	add	esp,	2</span><br><span class="line">	pop	bp</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">;=======	get FAT Entry</span><br><span class="line"></span><br><span class="line">Func_GetFATEntry:</span><br><span class="line"></span><br><span class="line">	push	es</span><br><span class="line">	push	bx</span><br><span class="line">	push	ax</span><br><span class="line">	mov	ax,	00</span><br><span class="line">	mov	es,	ax</span><br><span class="line">	pop	ax</span><br><span class="line">	mov	byte	[Odd],	0</span><br><span class="line">	mov	bx,	3</span><br><span class="line">	mul	bx</span><br><span class="line">	mov	bx,	2</span><br><span class="line">	div	bx</span><br><span class="line">	cmp	dx,	0</span><br><span class="line">	jz	Label_Even</span><br><span class="line">	mov	byte	[Odd],	1</span><br><span class="line"></span><br><span class="line">Label_Even:</span><br><span class="line"></span><br><span class="line">	xor	dx,	dx</span><br><span class="line">	mov	bx,	[BPB_BytesPerSec]</span><br><span class="line">	div	bx</span><br><span class="line">	push	dx</span><br><span class="line">	mov	bx,	8000h</span><br><span class="line">	add	ax,	SectorNumOfFAT1Start</span><br><span class="line">	mov	cl,	2</span><br><span class="line">	call	Func_ReadOneSector</span><br><span class="line">	</span><br><span class="line">	pop	dx</span><br><span class="line">	add	bx,	dx</span><br><span class="line">	mov	ax,	[es:bx]</span><br><span class="line">	cmp	byte	[Odd],	1</span><br><span class="line">	jnz	Label_Even_2</span><br><span class="line">	shr	ax,	4</span><br><span class="line"></span><br><span class="line">Label_Even_2:</span><br><span class="line">	and	ax,	0FFFh</span><br><span class="line">	pop	bx</span><br><span class="line">	pop	es</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">;=======	display num in al</span><br><span class="line">;将16进制数值显示到屏幕上 AL=要显示的16进制数</span><br><span class="line">Label_DispAL:</span><br><span class="line"></span><br><span class="line">	push	ecx</span><br><span class="line">	push	edx</span><br><span class="line">	push	edi</span><br><span class="line">	</span><br><span class="line">	mov	edi,	[DisplayPosition]	;edi拿到显示位置</span><br><span class="line">	mov	ah,	0Fh</span><br><span class="line">	mov	dl,	al		;先保存低4位</span><br><span class="line">	shr	al,	4		;先显示高4位</span><br><span class="line">	mov	ecx,	2	;显示2个字符</span><br><span class="line">.begin:</span><br><span class="line"></span><br><span class="line">	and	al,	0Fh</span><br><span class="line">	cmp	al,	9		;和9比较，大于9要-10+‘A’，反之+‘0’；一定要注意大写字母和数字不连续</span><br><span class="line">	ja	.1</span><br><span class="line">	add	al,	&#x27;0&#x27;</span><br><span class="line">	jmp	.2</span><br><span class="line">.1:</span><br><span class="line"></span><br><span class="line">	sub	al,	0Ah</span><br><span class="line">	add	al,	&#x27;A&#x27;</span><br><span class="line">.2:</span><br><span class="line"></span><br><span class="line">	mov	[gs:edi],	ax</span><br><span class="line">	add	edi,	2	;显示一个字符后要移位置（一个字符占2B）</span><br><span class="line">	</span><br><span class="line">	mov	al,	dl</span><br><span class="line">	loop	.begin</span><br><span class="line"></span><br><span class="line">	mov	[DisplayPosition],	edi	;更新显示位置</span><br><span class="line"></span><br><span class="line">	pop	edi</span><br><span class="line">	pop	edx</span><br><span class="line">	pop	ecx</span><br><span class="line">	</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;=======	tmp IDT</span><br><span class="line"></span><br><span class="line">IDT:</span><br><span class="line">	times	0x50	dq	0</span><br><span class="line">IDT_END:</span><br><span class="line"></span><br><span class="line">IDT_POINTER:</span><br><span class="line">		dw	IDT_END - IDT - 1</span><br><span class="line">		dd	IDT</span><br><span class="line"></span><br><span class="line">;=======	tmp variable</span><br><span class="line"></span><br><span class="line">RootDirSizeForLoop	dw	RootDirSectors</span><br><span class="line">SectorNo		dw	0</span><br><span class="line">Odd			db	0</span><br><span class="line">OffsetOfKernelFileCount	dd	OffsetOfKernelFile</span><br><span class="line"></span><br><span class="line">DisplayPosition		dd	0</span><br><span class="line"></span><br><span class="line">;=======	display messages</span><br><span class="line"></span><br><span class="line">StartLoaderMessage:	db	&quot;Start Loader&quot;</span><br><span class="line">NoLoaderMessage:	db	&quot;ERROR:No KERNEL Found&quot;</span><br><span class="line">KernelFileName:		db	&quot;KERNEL  BIN&quot;,0</span><br><span class="line">StartGetMemStructMessage:	db	&quot;Start Get Memory Struct.&quot;</span><br><span class="line">GetMemStructErrMessage:	db	&quot;Get Memory Struct ERROR&quot;</span><br><span class="line">GetMemStructOKMessage:	db	&quot;Get Memory Struct SUCCESSFUL!&quot;</span><br><span class="line"></span><br><span class="line">StartGetSVGAVBEInfoMessage:	db	&quot;Start Get SVGA VBE Info&quot;</span><br><span class="line">GetSVGAVBEInfoErrMessage:	db	&quot;Get SVGA VBE Info ERROR&quot;</span><br><span class="line">GetSVGAVBEInfoOKMessage:	db	&quot;Get SVGA VBE Info SUCCESSFUL!&quot;</span><br><span class="line"></span><br><span class="line">StartGetSVGAModeInfoMessage:	db	&quot;Start Get SVGA Mode Info&quot;</span><br><span class="line">GetSVGAModeInfoErrMessage:	db	&quot;Get SVGA Mode Info ERROR&quot;</span><br><span class="line">GetSVGAModeInfoOKMessage:	db	&quot;Get SVGA Mode Info SUCCESSFUL!&quot;</span><br></pre></td></tr></table></figure>

<h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p>对于以上本文所有代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/***************************************************</span><br><span class="line">		版权声明</span><br><span class="line">		</span><br><span class="line">	本操作系统名为：MINE</span><br><span class="line">	该操作系统未经授权不得以盈利或非盈利为目的进行开发，</span><br><span class="line">	只允许个人学习以及公开交流使用</span><br><span class="line">	代码最终所有权及解释权归田宇所有；</span><br><span class="line">	本模块作者：	田宇</span><br><span class="line">	EMail:		345538255@qq.com</span><br><span class="line">***************************************************/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OS</category>
        <category>田宇的书</category>
      </categories>
      <tags>
        <tag>bootloader</tag>
      </tags>
  </entry>
  <entry>
    <title>自动配置Proxy Server</title>
    <url>/2022/01/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AEProxy%20Server/</url>
    <content><![CDATA[<blockquote>
<p>关键配置写在了<code>config.json</code>文件里，其中需要动态修改的字段就是：服务器地址、端口号、密码。因为服务器一段时间后因为各种原因可能会失效。</p>
</blockquote>
<p>所以要想自动配置，分为两步：自动获取相应的服务器地址、端口号、密码；写在文件里。</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>初始条件是已经有了一个链接：<code>https://shen.mi/lian/jie</code>，访问这个链接就会得到一个BASE64编码的txt文件，我们对其解码然后提取出合适的服务器地址、端口号、密码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getServer</span>():</span><br><span class="line">    temp = requests.get(<span class="string">&#x27;https://shen.mi/lian/jie&#x27;</span>)</span><br><span class="line">    decoded_data = <span class="built_in">str</span>(base64.b64decode(temp.text), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 每一行的格式：trojan://[密码]@[服务器地址]:[端口]#[服务器信息]</span></span><br><span class="line">    <span class="comment"># 下面处理字符串提取合适的信息</span></span><br><span class="line">    lines = decoded_data.split(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    servers = []</span><br><span class="line">    <span class="keyword">for</span> eachLine <span class="keyword">in</span> lines:</span><br><span class="line">        servers.append(re.split(<span class="string">r&#x27;trojan://|@|:|#|·&#x27;</span>, eachLine))</span><br><span class="line">    <span class="comment"># servers[[&#x27;&#x27;, &#x27;密码&#x27;, &#x27;服务器&#x27;, &#x27;端口&#x27;, &#x27;类型&#x27;, &#x27;地址&#x27;, &quot;后面的不统一&quot;],</span></span><br><span class="line">    <span class="comment">#       [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;实时负载&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;] 无关信息</span></span><br><span class="line">    <span class="comment">#       只要IEPL的。</span></span><br><span class="line">    <span class="comment">#        ]</span></span><br><span class="line">    <span class="keyword">for</span> eachServer <span class="keyword">in</span> servers:</span><br><span class="line">        <span class="keyword">if</span> eachServer[<span class="number">4</span>] == <span class="string">&quot;IEPL&quot;</span> <span class="keyword">and</span> eachServer[<span class="number">5</span>] == <span class="string">&quot;香港HK&quot;</span>:</span><br><span class="line">            <span class="comment"># 先直接取第一个香港IEPL</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;为你选中: &quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(eachServer)</span><br><span class="line">            <span class="keyword">return</span> [eachServer[<span class="number">2</span>], eachServer[<span class="number">3</span>], eachServer[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(servers) &gt;= <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到合适的服务器，启用备选方案。\n如有特殊需要, 请手动编辑配置文件。&quot;</span>)</span><br><span class="line">        <span class="comment">#这里直接选一个固定编号的</span></span><br><span class="line">        <span class="keyword">return</span> [servers[<span class="number">2</span>][<span class="number">2</span>], servers[<span class="number">2</span>][<span class="number">3</span>], servers[<span class="number">2</span>][<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到合适的服务器，配置文件未更改。\n请手动编辑配置文件。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>通过<code>getServer()</code>得到了服务器地址、端口号、密码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modifyConfig</span>():</span><br><span class="line">    server_info = getServer()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> server_info :</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    server = server_info[<span class="number">0</span>]</span><br><span class="line">    port = server_info[<span class="number">1</span>]</span><br><span class="line">    password = server_info[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    json_obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/usr/src/trojan/config.json&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json_obj = json.load(f)</span><br><span class="line">        f.close()</span><br><span class="line">    json_obj[<span class="string">&#x27;remote_addr&#x27;</span>] = server</span><br><span class="line">    json_obj[<span class="string">&#x27;remote_port&#x27;</span>] = <span class="built_in">int</span>(port)</span><br><span class="line">    json_obj[<span class="string">&#x27;password&#x27;</span>] = [password]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/usr/src/trojan/config.json&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(json_obj, f)</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>

<h3 id="一些脚本"><a href="#一些脚本" class="headerlink" title="一些脚本"></a>一些脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#refreshTrojan.sh</span></span><br><span class="line">/usr/bin/python3 /home/tiger/refreshTrojan.py</span><br><span class="line">systemctl restart trojan</span><br><span class="line">./testTrojan.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#testTrojan.sh  </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;下面是否有trojan进程&quot;</span></span><br><span class="line">ps aux | grep trojan | grep -v grep</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;自己的ip: &quot;</span></span><br><span class="line">curl -4 ip.sb</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;trojan本机端口的ip: &quot;</span></span><br><span class="line">curl ip.sb --socks5 127.0.0.1:1080</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;proxychains的ip: &quot;</span></span><br><span class="line">proxychains curl -4 ip.sb</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
        <category>proxy</category>
      </categories>
      <tags>
        <tag>proxy server</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>一些小trick</title>
    <url>/2022/01/%E4%B8%80%E4%BA%9B%E5%B0%8Ftrick/</url>
    <content><![CDATA[<blockquote>
<p>收录平时遇见的小问题及其解决办法，持续更新<br>有些可能不是很管用，因为每个人的环境不同</p>
</blockquote>
<h3 id="cmd光标消失怎么办"><a href="#cmd光标消失怎么办" class="headerlink" title="cmd光标消失怎么办"></a>cmd光标消失怎么办</h3><p>输入法调中文模式，输入字母后按shift，拼音变成英文的同时，光标出现</p>
<h3 id="虚拟机Ubuntu突然连不上网了"><a href="#虚拟机Ubuntu突然连不上网了" class="headerlink" title="虚拟机Ubuntu突然连不上网了"></a>虚拟机Ubuntu突然连不上网了</h3><h4 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>只显示lo</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service network-manager stop</span><br><span class="line">sudo <span class="built_in">rm</span> /var/lib/NetworkManager/NetworkManager.state </span><br><span class="line">sudo service network-manager start</span><br></pre></td></tr></table></figure>

<h3 id="本地windows-SQLyog连接远端mySQL连不上"><a href="#本地windows-SQLyog连接远端mySQL连不上" class="headerlink" title="本地windows SQLyog连接远端mySQL连不上"></a>本地windows SQLyog连接远端mySQL连不上</h3><h4 id="情况-1"><a href="#情况-1" class="headerlink" title="情况"></a>情况</h4><p>腾讯云防火墙开了<br><code>mySQL</code>用户的主机名也改为<code>%</code>了</p>
<p>排查好半天，结果是<code>mySQ</code>L的默认监听地址是<code>127.0.0.1</code>(查看命令：<code>netstat -ntlp</code>)</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>修改<code>my.cnf</code>，在<code>[mysqld]</code>下添加<code>bind-address=0.0.0.0</code></p>
<h3 id="32位Win7虚拟机无法安装VMwareTools"><a href="#32位Win7虚拟机无法安装VMwareTools" class="headerlink" title="32位Win7虚拟机无法安装VMwareTools"></a>32位Win7虚拟机无法安装VMwareTools</h3><p>微软更新了驱动程序签名算法，2019年开始弃用SHA1，改用SHA2。猜测VMware Tools驱动程序使用SHA2，而Windows7只支持SHA1，需要下载安装补丁kb4474419来支持SHA2算法，或者换一个新一些的镜像文件。<a href="https://blog.csdn.net/teisite/article/details/117675403">参考链接</a></p>
<h3 id="VSCode-突然连接不上SSH"><a href="#VSCode-突然连接不上SSH" class="headerlink" title="VSCode 突然连接不上SSH"></a>VSCode 突然连接不上SSH</h3><p>VSCode 突然连接不上SSH，其他的都可以。</p>
<p>原因是我误删了文件夹.vscode-server。</p>
<p>.ssh文件夹，找到known_hosts文件，把连不上的ip对应的信息删掉，再用VSCode重新连接。<a href="https://blog.csdn.net/ms961516792/article/details/109050771">参考链接</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>tricks</tag>
        <tag>故障排查</tag>
      </tags>
  </entry>
</search>
